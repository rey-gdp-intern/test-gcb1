steps:
  - id: docker-login
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker login --username=$$USERNAME --password=$$PASSWORD']
    secretEnv: ['USERNAME', 'PASSWORD']

  - id: docker-build
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker build -t $$USERNAME/${_IMAGE_NAME}:${SHORT_SHA} .']
    secretEnv: ['USERNAME']
    waitFor:
      - "docker-login"

  - id: docker-push
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker push $$USERNAME/${_IMAGE_NAME}:${SHORT_SHA}']
    secretEnv: ['USERNAME']
    waitFor:
      - "docker-build"

  - id: deploy-to-eks
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Setup AWS credentials
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = $$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials

        echo "[default]" > ~/.aws/config
        echo "region = $${_AWS_REGION}" >> ~/.aws/config
        echo "output = json" >> ~/.aws/config

        # Update kubeconfig
        aws eks update-kubeconfig --name $${_CLUSTER_AWS} --region $${_AWS_REGION}

        # Determine the correct Kubernetes manifest to use based on the branch name
        if [[ "$${BRANCH_NAME}" == "main" || "$${BRANCH_NAME}" == "master" ]]; then
          cp ./k8s/production.yml ./k8s/deployment.yml
        elif [[ "$${BRANCH_NAME}" == "staging" ]]; then
          cp ./k8s/staging.yml ./k8s/deployment.yml
        elif [[ "$${BRANCH_NAME}" =~ ^staging_.*$ ]]; then
          cp ./k8s/staging.yml ./k8s/deployment.yml
        elif [[ "$${BRANCH_NAME}" == "develop" ]]; then
          cp ./k8s/develop.yml ./k8s/deployment.yml
        elif [[ "$${BRANCH_NAME}" =~ ^develop_.*$ ]]; then
          cp ./k8s/develop.yml ./k8s/deployment.yml
        else
          cp ./k8s/develop.yml ./k8s/deployment.yml
        fi

        # Replace placeholders in the Kubernetes deployment manifest
        sed -i "s|<PROJECT_NAME>|$${REPO_NAME}|g" ./k8s/deployment.yml
        sed -i "s|<VERSION>|$${SHORT_SHA}|g" ./k8s/deployment.yml
        sed -i "s|<IMAGE_NAME>|$${_REGISTRY_URL}/$${_IMAGE_NAME}:$${SHORT_SHA}|g" ./k8s/deployment.yml
        sed -i "s|<PORT>|$${_PORT}|g" ./k8s/deployment.yml

        # Deploy to EKS
        kubectl apply -f ./k8s/deployment.yml
    secretEnv: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY']
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
    waitFor:
      - "docker-push"

substitutions:
  _REGISTRY_URL: docker.io/reyshazni
  _PROJECT: intern-infra
  _CLUSTER: sandbox
  _ZONE: asia-southeast2-a
  _IMAGE_NAME: '${_PROJECT}-${REPO_NAME}-${BRANCH_NAME}'
  _PORT: '3000'
  _CLUSTER_AWS: sandbox-intern
  _AWS_REGION: us-east-1

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/GCB_DOCKER_PASSWORD/versions/latest
    env: 'PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/GCB_DOCKER_USERNAME/versions/latest
    env: 'USERNAME'
  - versionName: projects/$PROJECT_ID/secrets/AWS_ACCESS_KEY_ID/versions/latest
    env: 'AWS_ACCESS_KEY_ID'
  - versionName: projects/$PROJECT_ID/secrets/AWS_SECRET_ACCESS_KEY/versions/latest
    env: 'AWS_SECRET_ACCESS_KEY'
